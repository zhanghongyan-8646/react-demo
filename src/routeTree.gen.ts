/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FrontRouteImport } from './routes/front/route'
import { Route as IndexImport } from './routes/index'
import { Route as FrontLiveImport } from './routes/front/live'
import { Route as FrontCreateImport } from './routes/front/create'
import { Route as FrontEditIdImport } from './routes/front/edit.$id'
import { Route as FrontArticleIdImport } from './routes/front/article.$id'

// Create/Update Routes

const FrontRouteRoute = FrontRouteImport.update({
  id: '/front',
  path: '/front',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FrontLiveRoute = FrontLiveImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontCreateRoute = FrontCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontEditIdRoute = FrontEditIdImport.update({
  id: '/edit/$id',
  path: '/edit/$id',
  getParentRoute: () => FrontRouteRoute,
} as any)

const FrontArticleIdRoute = FrontArticleIdImport.update({
  id: '/article/$id',
  path: '/article/$id',
  getParentRoute: () => FrontRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/front': {
      id: '/front'
      path: '/front'
      fullPath: '/front'
      preLoaderRoute: typeof FrontRouteImport
      parentRoute: typeof rootRoute
    }
    '/front/create': {
      id: '/front/create'
      path: '/create'
      fullPath: '/front/create'
      preLoaderRoute: typeof FrontCreateImport
      parentRoute: typeof FrontRouteImport
    }
    '/front/live': {
      id: '/front/live'
      path: '/live'
      fullPath: '/front/live'
      preLoaderRoute: typeof FrontLiveImport
      parentRoute: typeof FrontRouteImport
    }
    '/front/article/$id': {
      id: '/front/article/$id'
      path: '/article/$id'
      fullPath: '/front/article/$id'
      preLoaderRoute: typeof FrontArticleIdImport
      parentRoute: typeof FrontRouteImport
    }
    '/front/edit/$id': {
      id: '/front/edit/$id'
      path: '/edit/$id'
      fullPath: '/front/edit/$id'
      preLoaderRoute: typeof FrontEditIdImport
      parentRoute: typeof FrontRouteImport
    }
  }
}

// Create and export the route tree

interface FrontRouteRouteChildren {
  FrontCreateRoute: typeof FrontCreateRoute
  FrontLiveRoute: typeof FrontLiveRoute
  FrontArticleIdRoute: typeof FrontArticleIdRoute
  FrontEditIdRoute: typeof FrontEditIdRoute
}

const FrontRouteRouteChildren: FrontRouteRouteChildren = {
  FrontCreateRoute: FrontCreateRoute,
  FrontLiveRoute: FrontLiveRoute,
  FrontArticleIdRoute: FrontArticleIdRoute,
  FrontEditIdRoute: FrontEditIdRoute,
}

const FrontRouteRouteWithChildren = FrontRouteRoute._addFileChildren(
  FrontRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/create': typeof FrontCreateRoute
  '/front/live': typeof FrontLiveRoute
  '/front/article/$id': typeof FrontArticleIdRoute
  '/front/edit/$id': typeof FrontEditIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/create': typeof FrontCreateRoute
  '/front/live': typeof FrontLiveRoute
  '/front/article/$id': typeof FrontArticleIdRoute
  '/front/edit/$id': typeof FrontEditIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/front': typeof FrontRouteRouteWithChildren
  '/front/create': typeof FrontCreateRoute
  '/front/live': typeof FrontLiveRoute
  '/front/article/$id': typeof FrontArticleIdRoute
  '/front/edit/$id': typeof FrontEditIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/front'
    | '/front/create'
    | '/front/live'
    | '/front/article/$id'
    | '/front/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/front'
    | '/front/create'
    | '/front/live'
    | '/front/article/$id'
    | '/front/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/front'
    | '/front/create'
    | '/front/live'
    | '/front/article/$id'
    | '/front/edit/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FrontRouteRoute: typeof FrontRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FrontRouteRoute: FrontRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/front"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/front": {
      "filePath": "front/route.tsx",
      "children": [
        "/front/create",
        "/front/live",
        "/front/article/$id",
        "/front/edit/$id"
      ]
    },
    "/front/create": {
      "filePath": "front/create.tsx",
      "parent": "/front"
    },
    "/front/live": {
      "filePath": "front/live.tsx",
      "parent": "/front"
    },
    "/front/article/$id": {
      "filePath": "front/article.$id.tsx",
      "parent": "/front"
    },
    "/front/edit/$id": {
      "filePath": "front/edit.$id.tsx",
      "parent": "/front"
    }
  }
}
ROUTE_MANIFEST_END */
